application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName sampleApp
    buildTool maven
    cacheProvider ehcache
    clientFramework angular
    clientPackageManager npm
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    entitySuffix Entity
    jhiPrefix jhi
    languages [en, fr]
    messageBroker no
    nativeLanguage en
    packageName com.example.myapp
    prodDatabaseType mysql
    reactive false
    searchEngine elasticsearch
    serverPort 8080
    serviceDiscoveryType no
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks [cucumber, protractor, jest]
    websocket no
  }
}

// ENTIDADES.jdl
// Gerado automaticamente. Este arquivo contém apenas as entidades básicas.
// Os campos e validações serão posteriormente adicionados via CAMPOS.py.

entity Author (author){
  /**
   * Comment: Nome do autor
   * Example: Nome do autor; deve ter entre 2 e 50 caracteres
   */
  name String required minlength(2) maxlength(50)
  /**
   * Annotations: unique
   * Comment: E-mail do autor
   * Example: Expressão regular para validação de e-mail
   */
  email String required maxlength(100) pattern(/^[A-Z][a-z]+\d$/) unique
  /**
   * Comment: Data de nascimento do autor
   * Example: Formato de data; opcional
   */
  birthDate LocalDate
  /**
   * Comment: Biografia do autor
   * Example: Campo para texto longo sem limite de caracteres
   */
  bio TextBlob
  /**
   * Annotations: Foto do autor
   * Comment: Tamanho mínimo de 1KB e máximo de 2MB
   */
  photo ImageBlob max(1024) minbytes(2048000)
}

entity Book (book){
  /**
   * Comment: Título do livro
   * Example: Entre 1 e 200 caracteres
   */
  title String required minlength(1) maxlength(200)
  /**
   * Annotations: unique
   * Comment: Código ISBN do livro
   * Example: Campo opcional, mas único se informado
   */
  isbn String minlength(10) maxlength(13) unique
  /**
   * Comment: Data de publicação
   * Example: Data estimada de publicação
   */
  publicationDate LocalDate
  /**
   * Comment: Sinopse ou resumo do livro
   * Example: Texto livre
   */
  summary TextBlob
  /**
   * Annotations: Capa do livro
   * Comment: Mínimo 1KB, máximo ~5MB
   */
  cover ImageBlob max(1024) minbytes(5242880)
}

entity Profile (profile){
  /**
   * Annotations: unique
   * Comment: Nome de usuário
   * Example: Deve ter entre 3 e 30 caracteres
   */
  username String required minlength(3) maxlength(30) unique
  /**
   * Comment: Nome exibido no perfil
   * Example: Campo para nome amigável ou apelido
   */
  displayName String maxlength(50)
  /**
   * Annotations: unique
   * Comment: E-mail do perfil
   * Example: Expressão regular para validação de e-mail
   */
  email String required maxlength(100) pattern(/^[A-Z][a-z]+\d$/) unique
  /**
   * Annotations: Foto de perfil
   * Comment: Mínimo 1KB, máximo 2MB
   */
  avatar ImageBlob max(1024) minbytes(2048000)
  /**
   * Comment: Descrição do perfil
   * Example: Campo destinado a textos longos
   */
  description TextBlob
}



enum Country {
  /**
   * Ex: Representa a Bélgica
   * Valor explícito; se omitido, usa o próprio nome da chave
   */
  BELGIUM ("Belgium")
  /**
   * Ex: Representa a França
   */
  FRANCE ("France")
  /**
   * Ex: Representa a Itália
   */
  ITALY ("Italy")
  /**
   * Ex: Representa a China
   * Uso de aspas para incluir caracteres especiais
   */
  CHINA ("中国")
}

dto Author with mapstruct
service Author with serviceClass
paginate Author with pagination
search Author with elasticsearch
microservice Author with mySuperMS
angularSuffix Author with Author
clientRootFolder Author with client
readOnly Author

dto Book with no
service Book with serviceClass
paginate Book with infinite-scroll
search Book with elasticsearch
readOnly Book

dto Profile with mapstruct
service Profile with serviceImpl
paginate Profile with no pagination
skipClient Profile
microservice Profile with myOtherMS
angularSuffix Profile with Profile
clientRootFolder Profile with account

relationship OneToMany {
    Owner{car} to Car{owner(id)}
}

relationship ManyToOne {
    Car{owner} to Owner{(id)}
}

relationship ManyToMany {
    Car{driver} to Driver{car(nome)}
}

relationship OneToOne {
    Car{driver} to Driver{car(id)}
}

relationship OneToOne {
    Citizen{passport} to Passport{(id)}
}

